#Maintainer sur <sergiusz.urbaniak@gmail.com>

pkgname=k8s-bin

_pkgname=kubernetes
pkgver=1.7.5
pkgrel=1

# see https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#external-dependency-version-information
_etcd_pkgname=etcd
_etcd_pkgver=3.0.17

pkgdesc="Production-Grade Container Scheduling and Management"
arch=('x86_64')
url='https://github.com/kubernetes/kubernetes'
licence=('Apache')
provides=("k8s-bin=${pkgver}")
conflicts=('kubernetes')
makedepends=('openssl')
depends=('docker=1:1.12.6-1')

source_x86_64=("https://dl.k8s.io/v${pkgver}/kubernetes-server-linux-amd64.tar.gz"
               "https://github.com/coreos/etcd/releases/download/v${_etcd_pkgver}/${_etcd_pkgname}-v${_etcd_pkgver}-linux-amd64.tar.gz")

md5sums_x86_64=('c15c28acb8557883bec4d41c962444be'
                '0b9ae0d2fb96eabe612d6edd9bc0912a')

_PKGARCH=amd64

_API_SERVER_IP="10.1.1.1"
_DNS_SERVER_IP="10.3.0.10"
_DNS_DOMAIN="cluster.local"

build() {
    mkdir -p dns
    cd dns
    curl -L -s https://raw.githubusercontent.com/kubernetes/kubernetes/v${pkgver}/cluster/addons/dns/kubedns-svc.yaml.sed \
        | sed -e "s/\$DNS_SERVER_IP/${_DNS_SERVER_IP}/g" -e "s/\$DNS_DOMAIN/${_DNS_DOMAIN}/g" \
              > kubedns.yaml

    echo "---" >> kubedns.yaml
    curl -L -s https://raw.githubusercontent.com/kubernetes/kubernetes/v${pkgver}/cluster/addons/dns/kubedns-controller.yaml.sed \
        | sed -e "s/\$DNS_SERVER_IP/${_DNS_SERVER_IP}/g" -e "s/\$DNS_DOMAIN/${_DNS_DOMAIN}/g" \
              >> kubedns.yaml

    echo "---" >> kubedns.yaml
    curl -L -s https://raw.githubusercontent.com/kubernetes/kubernetes/v${pkgver}/cluster/addons/dns/kubedns-cm.yaml \
         >> kubedns.yaml

    echo "---" >> kubedns.yaml
    curl -L -s https://raw.githubusercontent.com/kubernetes/kubernetes/v${pkgver}/cluster/addons/dns/kubedns-sa.yaml \
         >> kubedns.yaml
    cd ..

    mkdir -p tls
    cd tls
    openssl genrsa -out ca.key 2048
    openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj "/CN=kube-ca"

    openssl genrsa -out apiserver.key 2048
    openssl req -new -key apiserver.key -out apiserver.csr -subj "/CN=kube-api" -config ../../openssl-api.cnf
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out apiserver.crt -days 365 -extensions v3_req -extfile ../../openssl-api.cnf

    openssl genrsa -out kubelet.key 2048
    openssl req -new -key kubelet.key -out kubelet.csr -subj "/CN=kubelet/O=system:masters" -config ../../openssl-kubelet.cnf
    openssl x509 -req -in kubelet.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out kubelet.crt -days 365 -extensions v3_req -extfile ../../openssl-kubelet.cnf

    openssl genrsa -out service-account.key 2048
    openssl rsa -in service-account.key -pubout >service-account.pub

    openssl genrsa -out etcd.key 2048
    openssl req -new -key etcd.key -out etcd.csr -subj "/CN=etcd" -config ../../openssl-etcd.cnf
    openssl x509 -req -in etcd.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out etcd.crt -days 365 -extensions v3_req -extfile ../../openssl-etcd.cnf

    cat >kubeconfig <<EOF
apiVersion: v1
kind: Config
clusters:
- name: local
  cluster:
    server: https://${_API_SERVER_IP}
    certificate-authority-data: $(base64 -w 0 ca.crt)
users:
- name: kubelet
  user:
    client-certificate-data: $(base64 -w 0 kubelet.crt)
    client-key-data: $(base64 -w 0 kubelet.key)
contexts:
- context:
    cluster: local
    user: kubelet
EOF
}

package() {
    # docker drop-in
    install -Dm644 "../10-podnet.conf" "${pkgdir}/usr/lib/systemd/system/docker.service.d/10-podnet.conf"

    # bridge network
    install -Dm644 "../k8s0.netdev" "${pkgdir}/usr/lib/systemd/network/k8s0.netdev"
    install -Dm644 "../k8s0.network" "${pkgdir}/usr/lib/systemd/network/k8s0.network"

    # k8s control plane
    install -Dm644 "../apiserver.service" "${pkgdir}/usr/lib/systemd/system/apiserver.service"
    install -Dm644 "../controller-manager.service" "${pkgdir}/usr/lib/systemd/system/controller-manager.service"
    install -Dm644 "../kubelet.service" "${pkgdir}/usr/lib/systemd/system/kubelet.service"
    install -Dm644 "../proxy.service" "${pkgdir}/usr/lib/systemd/system/proxy.service"
    install -Dm644 "../scheduler.service" "${pkgdir}/usr/lib/systemd/system/scheduler.service"

    # TLS assets
    install -dm755 "${pkgdir}/etc/kubernetes/tls"
    cp -r "${srcdir}"/tls/* "${pkgdir}/etc/kubernetes/tls/"

    install -dm755 "${pkgdir}/etc/kubernetes/yaml"
    cp -r "${srcdir}"/dns/* "${pkgdir}/etc/kubernetes/yaml/"

    # k8s binaries
    install -Dm755 "kubernetes/server/bin/kubefed" "${pkgdir}/usr/bin/kubefed"
    install -Dm755 "kubernetes/server/bin/hyperkube" "${pkgdir}/usr/bin/hyperkube"

    # etcd
    install -Dm644 "../etcd.service" "$pkgdir/usr/lib/systemd/system/etcd.service"

    cd $srcdir
    install -Dm755 "${_etcd_pkgname}-v${_etcd_pkgver}-linux-amd64/etcd" "${pkgdir}/usr/bin/etcd"
    install -Dm755 "${_etcd_pkgname}-v${_etcd_pkgver}-linux-amd64/etcdctl" "${pkgdir}/usr/bin/etcdctl"
}
